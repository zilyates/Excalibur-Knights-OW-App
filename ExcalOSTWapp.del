globalvar define tempHealingDealt;
globalvar define tempHeroDamageDealt;
globalvar define tempDamageTaken;
globalvar define tempUltimatesUsed;
globalvar define tempUltimatesEarned;
globalvar define tempDeaths;
globalvar define tempWeaponAccuracy;
globalvar define tempCriticalHitAccuracy;
globalvar define tempScopedAccuracy;
globalvar define tempSoloKills;
globalvar define tempObjectiveKills;
globalvar define tempHealingReceived;
globalvar define tempDamageBlocked;
globalvar define tempEliminations;
globalvar define tempDefensiveAssists;
globalvar define tempFinalBlows;
globalvar define tempEnvirDeaths;
globalvar define tempEnvirKills;
globalvar define tempMultiKillBest;
globalvar define tempMultiKillNum;
globalvar define tempOffensiveAssists;
globalvar define index = 1;
globalvar define weaponAccHeros = 0;
globalvar define scopedAccHeros = 0;
globalvar define critAccHeros = 0;
rule: "Logging to inspector player stats"
if (IsBetweenRounds())
{
    // Log to inspector outside of loop
    // Do sum math inside of loop
    foreach(define player in AllPlayers(Team.Team1))
    {
        foreach(define hero in AllHeroes())
        {
            // Create sums from all heros played to log to inspector
            // Instead of all tanks, just tanks that can block damage
            // If else tank dps support
            // if damage check accuracy stats
            if(ArrayContains(AllTankHeroes(), HeroOf(player)))
            { tempDamageBlocked += PlayerHeroStat(player, hero, PlayerHeroStat.DamageBlocked); }
            else if(ArrayContains(AllDamageHeroes(), HeroOf(player)))
            {}
            else if(ArrayContains(AllSupportHeroes(), HeroOf(player)))
            { tempHealingDealt += PlayerHeroStat(player, hero, PlayerHeroStat.HealingDealt); }
            if(PlayerHeroStat(player, hero, PlayerHeroStat.WeaponAccuracy) > 0)
            {
                weaponAccHeros++;
                tempWeaponAccuracy += PlayerHeroStat(player, hero, PlayerHeroStat.WeaponAccuracy);
            }
            if(PlayerHeroStat(player, hero, PlayerHeroStat.CriticalHitAccuracy) > 0)
            {
                critAccHeros++;
                tempCriticalHitAccuracy += PlayerHeroStat(player, hero, PlayerHeroStat.CriticalHitAccuracy);
            }
            if(PlayerHeroStat(player, hero, PlayerHeroStat.ScopedAccuracy) > 0)
            {
                scopedAccHeros++;
                tempScopedAccuracy += PlayerHeroStat(player, hero, PlayerHeroStat.ScopedAccuracy);
            }
            tempHeroDamageDealt += PlayerHeroStat(player, hero, PlayerHeroStat.HeroDamageDealt);
            tempDamageTaken += PlayerHeroStat(player, hero, PlayerHeroStat.DamageTaken);
            tempUltimatesUsed += PlayerHeroStat(player, hero, PlayerHeroStat.UltimatesUsed);
            tempUltimatesEarned += PlayerHeroStat(player, hero, PlayerHeroStat.UltimatesEarned);
            tempDeaths += PlayerHeroStat(player, hero, PlayerHeroStat.Deaths);
            tempSoloKills += PlayerHeroStat(player, hero, PlayerHeroStat.SoloKills);
            tempObjectiveKills += PlayerHeroStat(player, hero, PlayerHeroStat.ObjectiveKills);
            tempHealingReceived += PlayerHeroStat(player, hero, PlayerHeroStat.HealingReceived);
        }
        // Put here cuz overall player stats not player specific
        tempEliminations += PlayerStat(player, PlayerStat.Eliminations);
        tempDefensiveAssists += PlayerStat(player, PlayerStat.DefensiveAssists);
        tempFinalBlows += PlayerStat(player, PlayerStat.FinalBlows);
        tempEnvirDeaths += PlayerStat(player, PlayerStat.EnvironmentalDeaths);
        tempEnvirKills += PlayerStat(player, PlayerStat.EnvironmentalKills);
        tempMultiKillBest += PlayerStat(player, PlayerStat.MultikillBest);
        tempMultiKillNum += PlayerStat(player, PlayerStat.Multikills);
        tempOffensiveAssists += PlayerStat(player, PlayerStat.OffensiveAssists);
        tempScopedAccuracy /= scopedAccHeros;
        tempWeaponAccuracy /= weaponAccHeros;
        tempCriticalHitAccuracy /= critAccHeros;
        if(ArrayContains(AllTankHeroes(), HeroOf(player)))
        { LogToInspector(<"<0> Damage Blocked: <1>", player, tempDamageBlocked>); }
        else if(ArrayContains(AllSupportHeroes(), HeroOf(player)))
        { LogToInspector(<"<0> Healing Done: <1>", player,tempHealingDealt>); }
        LogToInspector(<"<0> Damage Done: <1>", player, tempHeroDamageDealt>);
        LogToInspector(<"<0> Damage Taken: <1>", player, tempDamageTaken>);
        LogToInspector(<"<0> Ultimates Used: <1>", player, tempUltimatesUsed>);
        LogToInspector(<"<0> Ultimates Earned: <1>", player, tempUltimatesEarned>);
        LogToInspector(<"<0> Deaths: <1>", player, tempDeaths>);
        LogToInspector(<"<0> Weapon Accuracy: <1>", player, tempWeaponAccuracy>);
        LogToInspector(<"<0> Critical Hits Accuracy: <1>", player, tempCriticalHitAccuracy>);
        LogToInspector(<"<0> Scoped Weapon Accuracy: <1>", player, tempScopedAccuracy>);
        LogToInspector(<"<0> Solo Kills: <1>", player, tempSoloKills>);
        LogToInspector(<"<0> Objective Kills: <1>", player, tempObjectiveKills>);
        LogToInspector(<"<0> Healing Received: <1>", player, tempHealingReceived>);
        LogToInspector(<"<0> Eliminations: <1>", player, tempEliminations>);
        LogToInspector(<"<0> Defensive Assists: <1>", player, tempDefensiveAssists>);
        LogToInspector(<"<0> Final Blows: <1>", player, tempFinalBlows>);
        LogToInspector(<"<0> Environmental Deaths: <1>", player, tempEnvirDeaths>);
        LogToInspector(<"<0> Environmental Kills: <1>", player, tempEnvirKills>);
        LogToInspector(<"<0> Multikill Best: <1>", player, tempMultiKillBest>);
        LogToInspector(<"<0> Multikills: <1>", player, tempMultiKillNum>);
        LogToInspector(<"<0> Offensive Assists: <1>", player, tempOffensiveAssists>);
        tempDamageBlocked = 0;   tempHealingDealt = 0;   tempHeroDamageDealt = 0;
        tempDamageTaken = 0;     tempUltimatesUsed = 0;  tempUltimatesEarned = 0;
        tempDeaths = 0;          tempWeaponAccuracy = 0; tempCriticalHitAccuracy = 0;
        tempScopedAccuracy = 0;  tempSoloKills = 0;      tempObjectiveKills = 0;
        tempHealingReceived = 0; tempEliminations = 0;   tempDefensiveAssists = 0;
        tempFinalBlows = 0;      tempEnvirDeaths = 0;    tempEnvirKills = 0;
        tempMultiKillBest = 0;   tempMultiKillNum = 0;   tempOffensiveAssists = 0;
    }
}